// An element with position: absolute; is positioned relative to the nearest positioned ancestor (instead of positioned relative to the viewport, like fixed).
// However; if an absolute positioned element has no positioned ancestors, it uses the document body, and moves along with page scrolling.
.sidebar {
    position: absolute; //there is no ancestor, so it's using the document body as reference
    top: 0;
    left: 0;
    bottom: 0; //add this so there is no gap between the bottom and the screen
    width: 25vw; //px is absolute while vw/vh, rem, em, % are relative; relative units are better suited to responsive design and scalable
    background-color: #101010;
    color: white;

    //flex display makes it easier to design flexible responsive layout structure without using float or positioning.
    display: flex;
    flex-direction: column; //when you have several items layed vertically; default is row which lays items horizontally
    justify-content: center;
    align-items: center;
}

.sidebarContent {
    height: 100%; //to make sure the first part goes to the top and the second part goes to the bottom
    
    display: flex;
    flex-direction: column;
    justify-content: space-between; //between first part div and second part nav
}

.profileDetails {
    margin-top: 2rem; //you can get this information from Figma (press down Ctrl + Alt to see margin/padding)
}

.profileImageDiv {
    position: relative; //move notification to the right upper corner relative to the div
}

.notifications {
    width: 2rem; //in figma, the notification is 29*29 px, convert to about 2rem
    height: 2rem;
    border-radius: 50%; //rounded border
    background-color: #DC3434;

    //to make it center in the circle (flex is good when you want to center things)
    display: flex;
    justify-content: center;
    align-items: center;

    //use relative position from the parent class
    position: absolute; 
    top: -1rem;
    right: 6rem;
}